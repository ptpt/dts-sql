drop table if exists dts_sql_test;

create TABLE if not exists dts_sql_test (
    _bigint bigint,
    _bit bit,
    _boolean boolean,
    _bytea bytea,
    _char char,
    _cidr cidr,
    _date date,
    _daterange daterange,
    _decimal decimal,
    _double_precision double precision,
    _inet inet,
    _int4range int4range,
    _int8range int8range,
    _integer integer,
    _interval interval,
    _json json,
    _jsonb jsonb,
    _macaddr macaddr,
    _money money,
    _numeric numeric,
    _numrange numrange,
    _real real,
    _smallint smallint,
    _text text,
    _time_with_timezone time with time zone,
    _time_without_timezone time without time zone,
    _timestamp_without_zone timestamp without time zone,
    _timestamp_zone timestamp with time zone,
    _tsrange tsrange,
    _tstzrange tstzrange,
    _tsvector tsvector,
    _uuid uuid,
    _varbit bit varying,
    _varchar varchar,
    _xml xml,
    _array integer[3][3],
    id integer primary key
);
select column_name, 
udt_name::regtype from information_schema.columns where table_schema = 'public' and table_name = 'dts_sql_test';

insert into dts_sql_test 
(
    _bigint, --- bigint,
    _bit,  --- bit,
    _boolean, --- boolean,
    _bytea, --- bytea,
    _char,  --- char,
    _cidr, --- cidr,
    _date, --- date,
    _daterange, --- daterange,
    _decimal, --- decimal,
    _double_precision, --- double precision,
    _inet, --- inet,
    _int4range, --- int4range,
    _int8range, --- int8range,
    _integer, --- integer,
    _interval, --- interval,
    _json, --- json,
    _jsonb, --- jsonb,
    _macaddr, --- macaddr,
    _money, --- money,
    _numeric, --- numeric,
    _numrange, --- numrange,
    _real, --- real,
    _smallint, --- smallint,
    _text, --- text,
    _time_with_timezone, --- time with time zone,
    _time_without_timezone, --- time without time zone,
    _timestamp_without_zone, --- timestamp without time zone,
    _timestamp_zone, --- timestamp with time zone,
    _tsrange, --- tsrange,
    _tstzrange, --- tstzrange,
    _tsvector, --- tsvector,
    _uuid, --- uuid,
    _varbit, ---bit varying,
    _varchar, --- varchar,
    _xml, --- xml,
    _array, --- array,
    id --- integer primary key
)
values
(
    1, --- _bigint bigint,
    1::bit, --- _bit bit,
    false, --- _boolean boolean,
    'as'::bytea, --- _bytea bytea,
    'h', --- _char char,
    '192.168.100.128/25', --- _cidr cidr,
    '2018-02-02', --- _date date,
    daterange('2011-01-01', '2012-01-01'), --- _daterange daterange,
    12, --- _decimal decimal,
    13.12, --- _double_precision double precision,
    '192.168.100.128/25', --- _inet inet,
    int4range(1, 2), --- _int4range int4range,
    int8range(1, 3), --- _int8range int8range,
    12, --- _integer integer,
    '80 minutes', -- _interval interval,
    '{}', --- _json json,
    '[1,2,3]', --- _jsonb jsonb,
    '08-00-2b-01-02-03', --- _macaddr macaddr,
    12, --- _money money,
    12, --- _numeric numeric,
    numrange(1, 2), --- _numrange numrange,
    12.3, -- _real real,
    12, -- _smallint smallint,
    'asas', -- _text text,
    '2011-01-01 12:12:12Z', -- _time_with_timezone time with time zone,
    '2011-01-01 12:12:12Z', -- _time_without_timezone time without time zone,
    '2011-01-01 12:12:12Z', -- _timestamp_without_zone timestamp without time zone,
    '2011-01-01 12:12:12Z', -- _timestamp_zone timestamp with time zone,
    tsrange('2011-01-01 12:12:12Z', '2018-01-01 12:12:12Z'), -- _tsrange tsrange,
    tstzrange('2011-01-01 12:12:12Z', '2018-01-01 12:12:12Z'), -- _tstzrange tstzrange,
    'a fat cat sat on a mat and ate a fat rat', --- _tsvector tsvector,
    'A0EEBC99-9C0B-4EF8-BB6D-6BB9BD380A11', --- _uuid uuid,
    B'101', --- _varbit bit varying,
    'asas', --- _varchar varchar,
    '<foo>bar</foo>', --- _xml xml,
    '{{1,2,3},{4,5,6},{7,8,9}}', --- _array array,
    1 --- id integer primary key
);